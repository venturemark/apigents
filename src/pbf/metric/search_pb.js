// source: pbf/metric/search.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.metric.SearchI', null, global);
goog.exportSymbol('proto.metric.SearchI.Filter', null, global);
goog.exportSymbol('proto.metric.SearchI.Filter.Chunking', null, global);
goog.exportSymbol('proto.metric.SearchI.Filter.Property', null, global);
goog.exportSymbol('proto.metric.SearchO', null, global);
goog.exportSymbol('proto.metric.SearchO.Filter', null, global);
goog.exportSymbol('proto.metric.SearchO.Filter.Chunking', null, global);
goog.exportSymbol('proto.metric.SearchO.Result', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metric.SearchI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metric.SearchI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metric.SearchI.displayName = 'proto.metric.SearchI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metric.SearchI.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.metric.SearchI.Filter.repeatedFields_, null);
};
goog.inherits(proto.metric.SearchI.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metric.SearchI.Filter.displayName = 'proto.metric.SearchI.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metric.SearchI.Filter.Chunking = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metric.SearchI.Filter.Chunking, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metric.SearchI.Filter.Chunking.displayName = 'proto.metric.SearchI.Filter.Chunking';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metric.SearchI.Filter.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metric.SearchI.Filter.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metric.SearchI.Filter.Property.displayName = 'proto.metric.SearchI.Filter.Property';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metric.SearchO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metric.SearchO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metric.SearchO.displayName = 'proto.metric.SearchO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metric.SearchO.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metric.SearchO.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metric.SearchO.Filter.displayName = 'proto.metric.SearchO.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metric.SearchO.Filter.Chunking = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metric.SearchO.Filter.Chunking, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metric.SearchO.Filter.Chunking.displayName = 'proto.metric.SearchO.Filter.Chunking';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metric.SearchO.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.metric.SearchO.Result.repeatedFields_, null);
};
goog.inherits(proto.metric.SearchO.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metric.SearchO.Result.displayName = 'proto.metric.SearchO.Result';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metric.SearchI.prototype.toObject = function(opt_includeInstance) {
  return proto.metric.SearchI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metric.SearchI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchI.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && proto.metric.SearchI.Filter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metric.SearchI}
 */
proto.metric.SearchI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metric.SearchI;
  return proto.metric.SearchI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metric.SearchI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metric.SearchI}
 */
proto.metric.SearchI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.metric.SearchI.Filter;
      reader.readMessage(value,proto.metric.SearchI.Filter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metric.SearchI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metric.SearchI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metric.SearchI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.metric.SearchI.Filter.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.metric.SearchI.Filter.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metric.SearchI.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.metric.SearchI.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metric.SearchI.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchI.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunking: (f = msg.getChunking()) && proto.metric.SearchI.Filter.Chunking.toObject(includeInstance, f),
    operatorList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    propertyList: jspb.Message.toObjectList(msg.getPropertyList(),
    proto.metric.SearchI.Filter.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metric.SearchI.Filter}
 */
proto.metric.SearchI.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metric.SearchI.Filter;
  return proto.metric.SearchI.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metric.SearchI.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metric.SearchI.Filter}
 */
proto.metric.SearchI.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.metric.SearchI.Filter.Chunking;
      reader.readMessage(value,proto.metric.SearchI.Filter.Chunking.deserializeBinaryFromReader);
      msg.setChunking(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addOperator(value);
      break;
    case 3:
      var value = new proto.metric.SearchI.Filter.Property;
      reader.readMessage(value,proto.metric.SearchI.Filter.Property.deserializeBinaryFromReader);
      msg.addProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metric.SearchI.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metric.SearchI.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metric.SearchI.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchI.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunking();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.metric.SearchI.Filter.Chunking.serializeBinaryToWriter
    );
  }
  f = message.getOperatorList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPropertyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.metric.SearchI.Filter.Property.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metric.SearchI.Filter.Chunking.prototype.toObject = function(opt_includeInstance) {
  return proto.metric.SearchI.Filter.Chunking.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metric.SearchI.Filter.Chunking} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchI.Filter.Chunking.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    perpage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metric.SearchI.Filter.Chunking}
 */
proto.metric.SearchI.Filter.Chunking.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metric.SearchI.Filter.Chunking;
  return proto.metric.SearchI.Filter.Chunking.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metric.SearchI.Filter.Chunking} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metric.SearchI.Filter.Chunking}
 */
proto.metric.SearchI.Filter.Chunking.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPointer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPerpage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metric.SearchI.Filter.Chunking.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metric.SearchI.Filter.Chunking.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metric.SearchI.Filter.Chunking} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchI.Filter.Chunking.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPerpage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string pointer = 1;
 * @return {string}
 */
proto.metric.SearchI.Filter.Chunking.prototype.getPointer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metric.SearchI.Filter.Chunking} returns this
 */
proto.metric.SearchI.Filter.Chunking.prototype.setPointer = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string perpage = 2;
 * @return {string}
 */
proto.metric.SearchI.Filter.Chunking.prototype.getPerpage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.metric.SearchI.Filter.Chunking} returns this
 */
proto.metric.SearchI.Filter.Chunking.prototype.setPerpage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metric.SearchI.Filter.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.metric.SearchI.Filter.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metric.SearchI.Filter.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchI.Filter.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
    metricId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updateId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metric.SearchI.Filter.Property}
 */
proto.metric.SearchI.Filter.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metric.SearchI.Filter.Property;
  return proto.metric.SearchI.Filter.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metric.SearchI.Filter.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metric.SearchI.Filter.Property}
 */
proto.metric.SearchI.Filter.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetricId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdateId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metric.SearchI.Filter.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metric.SearchI.Filter.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metric.SearchI.Filter.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchI.Filter.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetricId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdateId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string metric_id = 1;
 * @return {string}
 */
proto.metric.SearchI.Filter.Property.prototype.getMetricId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metric.SearchI.Filter.Property} returns this
 */
proto.metric.SearchI.Filter.Property.prototype.setMetricId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string timestamp = 2;
 * @return {string}
 */
proto.metric.SearchI.Filter.Property.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.metric.SearchI.Filter.Property} returns this
 */
proto.metric.SearchI.Filter.Property.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string update_id = 3;
 * @return {string}
 */
proto.metric.SearchI.Filter.Property.prototype.getUpdateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.metric.SearchI.Filter.Property} returns this
 */
proto.metric.SearchI.Filter.Property.prototype.setUpdateId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Chunking chunking = 1;
 * @return {?proto.metric.SearchI.Filter.Chunking}
 */
proto.metric.SearchI.Filter.prototype.getChunking = function() {
  return /** @type{?proto.metric.SearchI.Filter.Chunking} */ (
    jspb.Message.getWrapperField(this, proto.metric.SearchI.Filter.Chunking, 1));
};


/**
 * @param {?proto.metric.SearchI.Filter.Chunking|undefined} value
 * @return {!proto.metric.SearchI.Filter} returns this
*/
proto.metric.SearchI.Filter.prototype.setChunking = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.metric.SearchI.Filter} returns this
 */
proto.metric.SearchI.Filter.prototype.clearChunking = function() {
  return this.setChunking(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metric.SearchI.Filter.prototype.hasChunking = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string operator = 2;
 * @return {!Array<string>}
 */
proto.metric.SearchI.Filter.prototype.getOperatorList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.metric.SearchI.Filter} returns this
 */
proto.metric.SearchI.Filter.prototype.setOperatorList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.metric.SearchI.Filter} returns this
 */
proto.metric.SearchI.Filter.prototype.addOperator = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metric.SearchI.Filter} returns this
 */
proto.metric.SearchI.Filter.prototype.clearOperatorList = function() {
  return this.setOperatorList([]);
};


/**
 * repeated Property property = 3;
 * @return {!Array<!proto.metric.SearchI.Filter.Property>}
 */
proto.metric.SearchI.Filter.prototype.getPropertyList = function() {
  return /** @type{!Array<!proto.metric.SearchI.Filter.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.metric.SearchI.Filter.Property, 3));
};


/**
 * @param {!Array<!proto.metric.SearchI.Filter.Property>} value
 * @return {!proto.metric.SearchI.Filter} returns this
*/
proto.metric.SearchI.Filter.prototype.setPropertyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.metric.SearchI.Filter.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.metric.SearchI.Filter.Property}
 */
proto.metric.SearchI.Filter.prototype.addProperty = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.metric.SearchI.Filter.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metric.SearchI.Filter} returns this
 */
proto.metric.SearchI.Filter.prototype.clearPropertyList = function() {
  return this.setPropertyList([]);
};


/**
 * optional Filter filter = 1;
 * @return {?proto.metric.SearchI.Filter}
 */
proto.metric.SearchI.prototype.getFilter = function() {
  return /** @type{?proto.metric.SearchI.Filter} */ (
    jspb.Message.getWrapperField(this, proto.metric.SearchI.Filter, 1));
};


/**
 * @param {?proto.metric.SearchI.Filter|undefined} value
 * @return {!proto.metric.SearchI} returns this
*/
proto.metric.SearchI.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.metric.SearchI} returns this
 */
proto.metric.SearchI.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metric.SearchI.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metric.SearchO.prototype.toObject = function(opt_includeInstance) {
  return proto.metric.SearchO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metric.SearchO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchO.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && proto.metric.SearchO.Filter.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.metric.SearchO.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metric.SearchO}
 */
proto.metric.SearchO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metric.SearchO;
  return proto.metric.SearchO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metric.SearchO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metric.SearchO}
 */
proto.metric.SearchO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.metric.SearchO.Filter;
      reader.readMessage(value,proto.metric.SearchO.Filter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 2:
      var value = new proto.metric.SearchO.Result;
      reader.readMessage(value,proto.metric.SearchO.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metric.SearchO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metric.SearchO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metric.SearchO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.metric.SearchO.Filter.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.metric.SearchO.Result.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metric.SearchO.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.metric.SearchO.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metric.SearchO.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchO.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunking: (f = msg.getChunking()) && proto.metric.SearchO.Filter.Chunking.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metric.SearchO.Filter}
 */
proto.metric.SearchO.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metric.SearchO.Filter;
  return proto.metric.SearchO.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metric.SearchO.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metric.SearchO.Filter}
 */
proto.metric.SearchO.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.metric.SearchO.Filter.Chunking;
      reader.readMessage(value,proto.metric.SearchO.Filter.Chunking.deserializeBinaryFromReader);
      msg.setChunking(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metric.SearchO.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metric.SearchO.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metric.SearchO.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchO.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunking();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.metric.SearchO.Filter.Chunking.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metric.SearchO.Filter.Chunking.prototype.toObject = function(opt_includeInstance) {
  return proto.metric.SearchO.Filter.Chunking.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metric.SearchO.Filter.Chunking} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchO.Filter.Chunking.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    perpage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metric.SearchO.Filter.Chunking}
 */
proto.metric.SearchO.Filter.Chunking.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metric.SearchO.Filter.Chunking;
  return proto.metric.SearchO.Filter.Chunking.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metric.SearchO.Filter.Chunking} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metric.SearchO.Filter.Chunking}
 */
proto.metric.SearchO.Filter.Chunking.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPointer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPerpage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metric.SearchO.Filter.Chunking.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metric.SearchO.Filter.Chunking.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metric.SearchO.Filter.Chunking} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchO.Filter.Chunking.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPerpage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string pointer = 1;
 * @return {string}
 */
proto.metric.SearchO.Filter.Chunking.prototype.getPointer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metric.SearchO.Filter.Chunking} returns this
 */
proto.metric.SearchO.Filter.Chunking.prototype.setPointer = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string perpage = 2;
 * @return {string}
 */
proto.metric.SearchO.Filter.Chunking.prototype.getPerpage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.metric.SearchO.Filter.Chunking} returns this
 */
proto.metric.SearchO.Filter.Chunking.prototype.setPerpage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Chunking chunking = 1;
 * @return {?proto.metric.SearchO.Filter.Chunking}
 */
proto.metric.SearchO.Filter.prototype.getChunking = function() {
  return /** @type{?proto.metric.SearchO.Filter.Chunking} */ (
    jspb.Message.getWrapperField(this, proto.metric.SearchO.Filter.Chunking, 1));
};


/**
 * @param {?proto.metric.SearchO.Filter.Chunking|undefined} value
 * @return {!proto.metric.SearchO.Filter} returns this
*/
proto.metric.SearchO.Filter.prototype.setChunking = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.metric.SearchO.Filter} returns this
 */
proto.metric.SearchO.Filter.prototype.clearChunking = function() {
  return this.setChunking(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metric.SearchO.Filter.prototype.hasChunking = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.metric.SearchO.Result.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metric.SearchO.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.metric.SearchO.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metric.SearchO.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchO.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    datapointList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    metricId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    updateId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metric.SearchO.Result}
 */
proto.metric.SearchO.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metric.SearchO.Result;
  return proto.metric.SearchO.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metric.SearchO.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metric.SearchO.Result}
 */
proto.metric.SearchO.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setDatapointList(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetricId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdateId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metric.SearchO.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metric.SearchO.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metric.SearchO.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metric.SearchO.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatapointList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getMetricId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUpdateId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated int64 datapoint = 1;
 * @return {!Array<number>}
 */
proto.metric.SearchO.Result.prototype.getDatapointList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.metric.SearchO.Result} returns this
 */
proto.metric.SearchO.Result.prototype.setDatapointList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.metric.SearchO.Result} returns this
 */
proto.metric.SearchO.Result.prototype.addDatapoint = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metric.SearchO.Result} returns this
 */
proto.metric.SearchO.Result.prototype.clearDatapointList = function() {
  return this.setDatapointList([]);
};


/**
 * optional string metric_id = 2;
 * @return {string}
 */
proto.metric.SearchO.Result.prototype.getMetricId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.metric.SearchO.Result} returns this
 */
proto.metric.SearchO.Result.prototype.setMetricId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.metric.SearchO.Result.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.metric.SearchO.Result} returns this
 */
proto.metric.SearchO.Result.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string update_id = 4;
 * @return {string}
 */
proto.metric.SearchO.Result.prototype.getUpdateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.metric.SearchO.Result} returns this
 */
proto.metric.SearchO.Result.prototype.setUpdateId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Filter filter = 1;
 * @return {?proto.metric.SearchO.Filter}
 */
proto.metric.SearchO.prototype.getFilter = function() {
  return /** @type{?proto.metric.SearchO.Filter} */ (
    jspb.Message.getWrapperField(this, proto.metric.SearchO.Filter, 1));
};


/**
 * @param {?proto.metric.SearchO.Filter|undefined} value
 * @return {!proto.metric.SearchO} returns this
*/
proto.metric.SearchO.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.metric.SearchO} returns this
 */
proto.metric.SearchO.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metric.SearchO.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Result result = 2;
 * @return {?proto.metric.SearchO.Result}
 */
proto.metric.SearchO.prototype.getResult = function() {
  return /** @type{?proto.metric.SearchO.Result} */ (
    jspb.Message.getWrapperField(this, proto.metric.SearchO.Result, 2));
};


/**
 * @param {?proto.metric.SearchO.Result|undefined} value
 * @return {!proto.metric.SearchO} returns this
*/
proto.metric.SearchO.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.metric.SearchO} returns this
 */
proto.metric.SearchO.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metric.SearchO.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.metric);
